{"componentChunkName":"component---src-components-post-post-js","path":"/alert-system-using-vertx-postgresql","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Alert system using Vert.x and PostgreSQL pub/sub\",\n  \"date\": \"2021-01-06\",\n  \"path\": \"/alert-system-using-vertx-postgresql\",\n  \"technologies\": [\"vertx\", \"postgresql\"],\n  \"description\": \"Create a simple alert system using Vert.x and PostgreSQL. Simulate a basic fake banking application and implement a \\\"below zero\\\" alert system.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"With complex systems, you could need a system delegating tasks. Generally, you have two options : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A cron running process recurrently;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A message broker - as RabbitMQ or Apache Kafka - triggering the process.\")), mdx(\"p\", null, \"These systems (especially a message broker) can be heavy and complicated in their implementation.\\nOtherwise, you can use a publisher-subscriber solution. Luckily, one of the most famous SQL databases contains an embedded pub/sub system since version 9.5: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.postgresql.org/\"\n  }), \"PostgreSQL\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"This article builds a basic banking application. Adding an operation on an account will trigger an alert system if the balance being below zero.\"), mdx(\"img\", {\n    src: Diagram,\n    className: \"m-auto\"\n  }), mdx(\"h1\", {\n    \"id\": \"setting-up-project\"\n  }, \"Setting up project\"), mdx(\"h2\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"p\", null, \"The implementation uses Docker, Java, and Vert.x (reactive application framework on the JVM). First, install \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://openjdk.java.net/\"\n  }), \"Java\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://maven.apache.org/\"\n  }), \"Maven\"), \", and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.docker.com/\"\n  }), \"Docker\"), \" on your machine.\\nTo skip this step, I work remotely on my repository with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/features/codespaces\"\n  }), \"Github Codespace\"), \".\"), mdx(\"br\", null), mdx(\"p\", null, \"Once your environment is ready, go on Vert.x starter page and generate a new project with the following information : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Version: 4.0.0;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Language: Java;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build system: Maven;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dependencies: Vert.x Web and Reactive PostgreSQL Client.\")), mdx(\"p\", null, \"Download your started and add a docker-compose.yml file in the root folder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"postgres:\\n    image: postgres:9.5 \\n    environment:\\n      POSTGRES_USER: postgres\\n      POSTGRES_PASSWORD: postgres\\n      POSTGRES_DB: pgas\\n    ports:\\n      - \\\"5432:5432\\\"\\n\")), mdx(\"p\", null, \"Then launch PostgreSQL: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker-compose up -d postgres\\n\")), mdx(\"h2\", {\n    \"id\": \"database-schema\"\n  }, \"Database schema\"), mdx(\"p\", null, \"Add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"database\"), \" folder in your root folder with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.sql\"), \" file :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir database && touch database/db.sql\\n\")), mdx(\"p\", null, \"db.sql content file : \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"CREATE TABLE account(\\n    id bigserial PRIMARY KEY,\\n    amount integer\\n);\\n\\nCREATE TABLE operation(\\n    id bigserial PRIMARY KEY,\\n    amount integer,\\n    account_id integer,\\n    CONSTRAINT fk_account_id FOREIGN KEY (account_id) REFERENCES account (id) ON UPDATE NO ACTION ON DELETE CASCADE\\n);\\n\")), mdx(\"p\", null, \"Execute these two creation queries.\"), mdx(\"h1\", {\n    \"id\": \"api-rest-creation\"\n  }, \"API REST creation\"), mdx(\"p\", null, \"Open your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MainVerticle.java\"), \" file, create a new HTTP server and set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BodyHandler\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LoggerHandler\"), \" middlewares:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Override\\npublic void start(Promise<Void> startPromise) throws Exception {\\n// Init Http server and its router\\nHttpServer server = vertx.createHttpServer();\\nRouter router = Router.router(vertx);\\n\\n// Add request logger\\nrouter.route().handler(LoggerHandler.create());\\n\\n// Enable request body handler\\nrouter.route().handler(BodyHandler.create());\\n\\n// Start http server using router\\nserver.requestHandler(router).listen(8080);\\n\\n    // Complete verticle launch\\n    startPromise.complete();\\n}\\n\")), mdx(\"p\", null, \"Create a new controller folder with a new file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AccountController.java\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class AccountController {\\n\\n    private Logger log = LoggerFactory.getLogger(AccountController.class);\\n\\n    public AccountController(Router router) {\\n        router.post(\\\"/accounts\\\").handler(this::postAccount);\\n        router.get(\\\"/accounts/:id\\\").handler(this::getAccount);\\n        router.post(\\\"/accounts/:id/operations\\\").handler(this::postOperation);\\n    }\\n\\n    private void getAccount(RoutingContext ctx) {\\n        // Retrieve account balance\\n    }\\n\\n    private void postAccount(RoutingContext ctx) {\\n        // Create a new account\\n    }\\n\\n    private void postOperation(RoutingContext ctx) {\\n        // Send operation\\n    }\\n\\n}\\n\")), mdx(\"p\", null, \"Instantiate a new AccountController in your main verticle:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Override\\npublic void start(Promise<Void> startPromise) throws Exception {\\n//...\\n// Enable request body handler\\nrouter.route().handler(BodyHandler.create());\\n\\n    // Init account controller\\nnew AccountController(router, pgClient);\\n\\n    //...\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"connect-vertx-to-postgresql\"\n  }, \"Connect Vert.x to PostgreSQL\"), mdx(\"p\", null, \"Create two new methods in your main verticle:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"private PgPool initPg(Vertx vertx) {\\n  PoolOptions poolOptions = new PoolOptions().setMaxSize(5);\\n\\n  return PgPool.pool(vertx, pgConnectOptions(), poolOptions);\\n}\\n\\nprivate PgConnectOptions pgConnectOptions() {\\n  return new PgConnectOptions()\\n                .setPort(5432)\\n                .setHost(\\\"localhost\\\")\\n                .setDatabase(\\\"pgas\\\")\\n                .setUser(\\\"postgres\\\")\\n                .setPassword(\\\"postgres\\\");\\n}\\n\")), mdx(\"p\", null, \"The first one initializes a PostgreSQL client, the second creates an object containing all PostgreSQL connect options.\\nConnect Vert.x  to your PostgreSQL database by calling initPg in the start method. Add the PgPool object to your controller constructor.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Override\\npublic void start(Promise<Void> startPromise) throws Exception {\\n    //...\\n    Router router = Router.router(vertx);\\n\\n    // Init PostgreSQL client\\n    PgPool pgClient = initPg(vertx);\\n    //...\\n\\n    // Init account controller\\n    new AccountController(router, pgClient);\\n    //...\\n}\\n\")), mdx(\"p\", null, \"Because we split the controller and database access object layer, create a new service AccountService in a service package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class AccountService {\\n\\n    private PgPool pgClient;\\n\\n    public AccountService(PgPool pgClient) {\\n        this.pgClient = pgClient;\\n    }\\n\\n    /**\\n     * Create a new account. It set the amount with\\n     * \\n     * @param amount\\n     * @return\\n     */\\n    public Future<JsonObject> createAccount(int amount) {\\n        Promise<JsonObject> promise = Promise.promise();\\n        pgClient.preparedQuery(\\\"INSERT INTO account(amount) VALUES ($1) RETURNING id\\\").execute(Tuple.of(amount), ar -> {\\n            if (ar.failed()) {\\n                promise.fail(ar.cause());\\n            } else {\\n                promise.complete(PgResult.rowSetToJsonObject(ar.result()));\\n            }\\n        });\\n\\n        return promise.future();\\n    }\\n\\n    /**\\n     * Get account amount status\\n     * \\n     * @param accountId Account identifier\\n     * @return Future completing process\\n     */\\n    public Future<JsonObject> getAccount(int accountId) {\\n        Promise<JsonObject> promise = Promise.promise();\\n        pgClient.preparedQuery(\\\"SELECT amount FROM account WHERE id = $1\\\").execute(Tuple.of(accountId), ar -> {\\n            if (ar.failed()) {\\n                promise.fail(ar.cause());\\n            } else {\\n                promise.complete(PgResult.rowSetToJsonObject(ar.result()));\\n            }\\n        });\\n\\n        return promise.future();\\n    }\\n\\n    /**\\n     * Add an operation on a specific account.\\n     * \\n     * @param accountId Account identifier\\n     * @param amount    Amount operation\\n     * @return Future completing process\\n     */\\n    public Future<Void> addOperation(int accountId, int amount) {\\n        Promise<Void> promise = Promise.promise();\\n        pgClient.preparedQuery(\\\"INSERT INTO operation (amount, account_id) VALUES ($1, $2);\\\")\\n                .execute(Tuple.of(amount, accountId), ar -> {\\n                    if (ar.failed()) {\\n                        promise.fail(ar.cause());\\n                    } else {\\n                        promise.complete();\\n                    }\\n                });\\n\\n        return promise.future();\\n    }\\n}\\n\")), mdx(\"p\", null, \"Add PgPool object to your AccountController constructor and instantiate the service:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"private AccountService accountService;\\n\\npublic AccountController(Router router, PgPool pgClient) {\\n    accountService = new AccountService(pgClient);\\n    //...\\n}\\n\")), mdx(\"p\", null, \"The PostgreSQL client returns values with RowSet and Row object (see Vert.x Reactive PostgreSQL Client documentation). As we render content through a rest API, add this utility class transforming PostgreSQL result into a valid JSON content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class PgResult {\\n\\n    private PgResult() {\\n        throw new IllegalStateException(\\\"Utility class\\\");\\n    }\\n\\n    private static List<JsonObject> jsonResult(RowSet<Row> rows) {\\n        List<JsonObject> values = new ArrayList<>();\\n        for (Row row : rows) {\\n            values.add(transformToJsonObject(row, rows.columnsNames()));\\n        }\\n\\n        return values;\\n    }\\n\\n    public static JsonObject rowSetToJsonObject(RowSet<Row> rows) {\\n        List<JsonObject> values = jsonResult(rows);\\n        return !values.isEmpty() ? values.get(0) : null;\\n    }\\n\\n    public static List<JsonObject> rowSetToList(RowSet<Row> rows) {\\n        return jsonResult(rows);\\n    }\\n\\n    private static JsonObject transformToJsonObject(Row row, List<String> columNames) {\\n        JsonObject tuple = new JsonObject();\\n        for (int i = 0; i < columNames.size(); i++) {\\n            Object value = row.getValue(i);\\n            if (value instanceof LocalDateTime)\\n                value = row.getValue(i).toString();\\n            tuple.put(columNames.get(i), value);\\n        }\\n\\n        return tuple;\\n    }\\n\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"connect-the-rest-api-to-postgresql\"\n  }, \"Connect the REST API to PostgreSQL\"), mdx(\"p\", null, \"Complete the REST endpoints with the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"private void getAccount(RoutingContext ctx) {\\n    try {\\n        int accountId = Integer.parseInt(ctx.request().getParam(\\\"id\\\"));\\n        accountService.getAccount(accountId).onSuccess(res -> HttpUtils.ok(ctx.response(), res))\\n                .onFailure(err -> HttpUtils.internalServerError(ctx.response(), err.getMessage()));\\n    } catch (NumberFormatException e) {\\n        HttpUtils.internalServerError(ctx.response(), \\\"Unable to parse account identifier\\\");\\n    }\\n}\\n\\nprivate void postAccount(RoutingContext ctx) {\\n    JsonObject body = ctx.getBodyAsJson();\\n\\n    // Get account amount. In case of null amount, get 0\\n    accountService.createAccount(body.getInteger(\\\"amount\\\", 0))\\n            .onSuccess(acc -> HttpUtils.created(ctx.response(), acc))\\n            .onFailure(err -> HttpUtils.internalServerError(ctx.response(), err.getMessage()));\\n}\\n\\nprivate void postOperation(RoutingContext ctx) {\\n    try {\\n        int accountId = Integer.parseInt(ctx.request().getParam(\\\"id\\\"));\\n        JsonObject body = ctx.getBodyAsJson();\\n        Integer operationAmount = body.getInteger(\\\"amount\\\");\\n        log.info(String.format(\\\"Operation amount for %d account: %d\\\", accountId, operationAmount));\\n        accountService.addOperation(accountId, operationAmount)\\n                .onSuccess(res -> HttpUtils.noContent(ctx.response()))\\n                .onFailure(err -> HttpUtils.internalServerError(ctx.response(), err.getMessage()));\\n    } catch (NumberFormatException e) {\\n        log.error(String.format(\\\"Unable to parse account identifier. Expected integer, found %s\\\",\\n                ctx.request().getParam(\\\"id\\\")), e);\\n        HttpUtils.internalServerError(ctx.response(), \\\"Unable to parse account identifier\\\");\\n    }\\n}\\n\")), mdx(\"p\", null, \"Add another utility class managing HTTP responses :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class HttpUtils {\\n\\n    private HttpUtils() {\\n        throw new IllegalStateException(\\\"Utility class\\\");\\n    }\\n\\n    private static void renderJson(HttpServerResponse response, int code, String value) {\\n        response.putHeader(HttpHeaderNames.CONTENT_TYPE, HttpHeaderValues.APPLICATION_JSON)\\n                .putHeader(HttpHeaderNames.CACHE_CONTROL, HttpHeaderValues.NO_CACHE)\\n                .putHeader(HttpHeaderNames.EXPIRES, \\\"-1\\\").setStatusCode(code).end(value);\\n    }\\n\\n    public static void ok(HttpServerResponse response, JsonObject object) {\\n        renderJson(response, HttpResponseStatus.OK.code(), object.encode());\\n    }\\n\\n    public static void created(HttpServerResponse response, JsonObject object) {\\n        renderJson(response, HttpResponseStatus.CREATED.code(), object.encode());\\n    }\\n\\n    public static void noContent(HttpServerResponse response) {\\n        response.putHeader(HttpHeaderNames.CACHE_CONTROL, HttpHeaderValues.NO_CACHE)\\n                .putHeader(HttpHeaderNames.EXPIRES, \\\"-1\\\").setStatusCode(HttpResponseStatus.NO_CONTENT.code()).end();\\n    }\\n\\n    public static void internalServerError(HttpServerResponse response, String error) {\\n        JsonObject err = new JsonObject().put(\\\"error\\\", error);\\n        renderJson(response, HttpResponseStatus.INTERNAL_SERVER_ERROR.code(), err.encode());\\n    }\\n}\\n\")), mdx(\"h1\", {\n    \"id\": \"managing-account-alerts\"\n  }, \"Managing account alerts\"), mdx(\"p\", null, \"The PgSubscriber class - from the PostgreSQL client - manage a subscriber connection listening to one or more channels. To create our system, we use a handler class listening events. Add an AlertHandler class in a handler package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class AlertHandler {\\n    private final Logger log = LoggerFactory.getLogger(AlertHandler.class);\\n    private static final String SUBSCRIBER_NAME = \\\"account_less_than_0\\\";\\n\\n    public AlertHandler(PgSubscriber subscriber) {\\n        subscriber.channel(SUBSCRIBER_NAME)\\n                .handler(payload -> log.info(String.format(\\\"Receiving an alert: Account %s is less than 0\\\", payload)));\\n\\n        subscriber.connect()\\n                .onFailure(err -> log.error(String.format(\\\"Unable to connect subscriber %s\\\", SUBSCRIBER_NAME), err));\\n    }\\n\\n}\\n\")), mdx(\"p\", null, \"Instantiate your handler in your main verticle :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Override\\npublic void start(Promise<Void> startPromise) throws Exception {\\n    //...    \\n  // Init account controller\\n  new AccountController(router, pgClient);\\n\\n  // Init alert handler\\n  new AlertHandler(pgSubscriber(vertx));\\n    //...\\n}\\n\\nprivate PgSubscriber pgSubscriber(Vertx vertx) {\\n  return PgSubscriber.subscriber(vertx, pgConnectOptions());\\n}\\n\")), mdx(\"p\", null, \"Add a SQL trigger calling a function after insert on operation table:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"CREATE OR REPLACE FUNCTION trigger_amount_process() RETURNS TRIGGER AS \\n    $BODY$\\n        DECLARE \\n            amount_number integer;\\n        BEGIN\\n            UPDATE account SET amount = amount + NEW.amount WHERE id = NEW.account_id RETURNING amount INTO amount_number;\\n            IF amount_number < 0 THEN\\n                PERFORM pg_notify('account_less_than_0', NEW.account_id::text);\\n            END IF;\\n\\n            RETURN NEW;\\n        END\\n    $BODY$\\nLANGUAGE plpgsql;\\n\\nCREATE TRIGGER trigger_amount_process AFTER INSERT ON operation FOR EACH ROW EXECUTE PROCEDURE trigger_amount_process();\\n\")), mdx(\"h1\", {\n    \"id\": \"try-it\"\n  }, \"Try it\"), mdx(\"p\", null, \"Launch our application:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"./mvnw clean compile exec:java\\n\")), mdx(\"p\", null, \"Add an account:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"curl -d \\\"{\\\\\\\"amount\\\\\\\": 100}\\\" -H \\\"Content-Type: application/json\\\" -X POST http://localhost:8080/accounts\\n\")), mdx(\"p\", null, \"Send some operations:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"curl -d \\\"{\\\\\\\"amount\\\\\\\": -10}\\\" -H \\\"Content-Type: application/json\\\" -X POST http://localhost:8080/accounts/1/operations\\ncurl -d \\\"{\\\\\\\"amount\\\\\\\": -15}\\\" -H \\\"Content-Type: application/json\\\" -X POST http://localhost:8080/accounts/1/operations\\ncurl -d \\\"{\\\\\\\"amount\\\\\\\": -50}\\\" -H \\\"Content-Type: application/json\\\" -X POST http://localhost:8080/accounts/1/operations\\ncurl -d \\\"{\\\\\\\"amount\\\\\\\": -50}\\\" -H \\\"Content-Type: application/json\\\" -X POST http://localhost:8080/accounts/1/operations\\n\")), mdx(\"p\", null, \"You should see multiple logs like the following example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Jan 04, 2021 4:17:32 PM fr.sledunois.pgas.controller.AccountController\\nINFO: Operation amount for 1 account: -10\\nJan 04, 2021 4:17:32 PM io.vertx.ext.web.handler.impl.LoggerHandlerImpl\\nINFO: 0:0:0:0:0:0:0:1 - - [Mon, 4 Jan 2021 16:17:32 GMT] \\\"POST /accounts/1/operations HTTP/1.1\\\" 204 0 \\\"-\\\" \\\"curl/7.68.0\\\"\\nJan 04, 2021 4:17:35 PM fr.sledunois.pgas.controller.AccountController\\nINFO: Operation amount for 1 account: -15\\nJan 04, 2021 4:17:35 PM io.vertx.ext.web.handler.impl.LoggerHandlerImpl\\nINFO: 0:0:0:0:0:0:0:1 - - [Mon, 4 Jan 2021 16:17:35 GMT] \\\"POST /accounts/1/operations HTTP/1.1\\\" 204 0 \\\"-\\\" \\\"curl/7.68.0\\\"\\nJan 04, 2021 4:17:37 PM fr.sledunois.pgas.controller.AccountController\\nINFO: Operation amount for 1 account: -50\\nJan 04, 2021 4:17:37 PM io.vertx.ext.web.handler.impl.LoggerHandlerImpl\\nINFO: 0:0:0:0:0:0:0:1 - - [Mon, 4 Jan 2021 16:17:37 GMT] \\\"POST /accounts/1/operations HTTP/1.1\\\" 204 0 \\\"-\\\" \\\"curl/7.68.0\\\"\\nJan 04, 2021 4:17:39 PM fr.sledunois.pgas.controller.AccountController\\nINFO: Operation amount for 1 account: -50\\nJan 04, 2021 4:17:39 PM io.vertx.ext.web.handler.impl.LoggerHandlerImpl\\nINFO: 0:0:0:0:0:0:0:1 - - [Mon, 4 Jan 2021 16:17:39 GMT] \\\"POST /accounts/1/operations HTTP/1.1\\\" 204 0 \\\"-\\\" \\\"curl/7.68.0\\\"\\nJan 04, 2021 4:17:39 PM fr.sledunois.pgas.handler.AlertHandler\\nINFO: Receiving an alert: Account 1 is less than 0\\n\")), mdx(\"p\", null, \"After sending your last operation, your PostgreSQL database triggered our system and called the AlertHandler class. It works!\"), mdx(\"br\", null), mdx(\"p\", null, \"Find entire code on my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/SLedunois/pg-alert-system\"\n  }), \"Github repository\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Alert system using Vert.x and PostgreSQL pub/sub","description":"Create a simple alert system using Vert.x and PostgreSQL. Simulate a basic fake banking application and implement a \"below zero\" alert system.","date":"14 hours ago"},"headings":[{"value":"Setting up project"},{"value":"Installation"},{"value":"Database schema"},{"value":"API REST creation"},{"value":"Connect Vert.x to PostgreSQL"},{"value":"Connect the REST API to PostgreSQL"},{"value":"Managing account alerts"},{"value":"Try it"}],"tableOfContents":{"items":[{"url":"#setting-up-project","title":"Setting up project","items":[{"url":"#installation","title":"Installation"},{"url":"#database-schema","title":"Database schema"}]},{"url":"#api-rest-creation","title":"API REST creation"},{"url":"#connect-vertx-to-postgresql","title":"Connect Vert.x to PostgreSQL"},{"url":"#connect-the-rest-api-to-postgresql","title":"Connect the REST API to PostgreSQL"},{"url":"#managing-account-alerts","title":"Managing account alerts"},{"url":"#try-it","title":"Try it"}]}}},"pageContext":{"slug":"/alert-system-using-vertx-postgresql"}}}