{"componentChunkName":"component---src-components-post-post-js","path":"/create-a-simple-kubernetes-cluster","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create a simple Kubernetes cluster\",\n  \"date\": \"2021-01-03\",\n  \"path\": \"/create-a-simple-kubernetes-cluster\",\n  \"technologies\": [\"kubernetes\"],\n  \"description\": \"Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available. In this tutorial, I create and deploy a simple Kubernetes cluster containing a Hello World NodeJS application.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"requirements\"\n  }, \"Requirements\"), mdx(\"p\", null, \"I need 3 Linux servers based on Debian distribution (you can choose another distribution if needed) named: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"k8smaster\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"k8snode1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"k8snode2\")), mdx(\"p\", null, \"Those servers need to contain a user dedicated to cluster management (I call it \\\"cluster\\\"). \"), mdx(\"h1\", {\n    \"id\": \"docker-installation\"\n  }, \"Docker installation\"), mdx(\"p\", null, \"Install Docker by running the following commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\\ncurl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \\\"$ID\\\")/gpg | apt-key add -\\nadd-apt-repository \\\"deb https://download.docker.com/linux/debian stretch stable\\\"\\napt-get update\\napt-get install -y docker-ce\\n\")), mdx(\"h1\", {\n    \"id\": \"kubernetes-installation\"\n  }, \"Kubernetes installation\"), mdx(\"p\", null, \"Install Kubernetes by running the following commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\\nadd-apt-repository \\\"deb http://apt.kubernetes.io/ kubernetes-xenial main\\\"\\napt-get update\\napt-get install -y kubelet kubeadm kubectl\\n\")), mdx(\"h1\", {\n    \"id\": \"configure-servers-hostname\"\n  }, \"Configure servers hostname\"), mdx(\"p\", null, \"Configure hostname file editing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/hostname\"), \" file on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k8snode1\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k8snode2\"), \". \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"sudo echo \\\"k8snode<X>\\\" > /etc/hostname # X is your node number\\n\")), mdx(\"p\", null, \"Edit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/hosts\"), \" files.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"127.0.0.1    localhost k8snode<X>\\n\")), mdx(\"p\", null, \"Configure k8smaster server by executing previous commands replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k8snode<X>\"), \" with k8smaster.\"), mdx(\"h1\", {\n    \"id\": \"configure-kubernetes-cluster\"\n  }, \"Configure Kubernetes Cluster\"), mdx(\"p\", null, \"This stage will create and configure the Kubernetes cluster on each server. Remind servers are named : \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"k8smaster\"), \": cluster master server. It controls and manages the cluster\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"k8snode1\"), \": cluster application first node\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"k8snode2\"), \": cluster application seconde node\")), mdx(\"h2\", {\n    \"id\": \"cluster-initialization\"\n  }, \"Cluster initialization\"), mdx(\"p\", null, \"From the k8smaster server, init the cluster master by running the following commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"kubeadm init --pod-network-cidr=10.244.0.0/16 \\u2013apiserver-advertise-address=<k8smaster_ip_address>\\n\")), mdx(\"p\", null, \"If everything goes well, you should see an output like this : \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"root@k8smaster:~$ kubeadm init --pod-network-cidr=10.244.0.0/16 \\u2013apiserver-advertise-address=192.168.1.25\\n[init] Using Kubernetes version: v1.13.4\\n[preflight] Running pre-flight checks\\n    [WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.3. Latest validated version: 18.06\\n[preflight] Pulling images required for setting up a Kubernetes cluster\\n[preflight] This might take a minute or two, depending on the speed of your internet connection\\n[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'\\n \\n[kubelet-start] Writing kubelet environment file with flags to file \\\"/var/lib/kubelet/kubeadm-flags.env\\\"\\n[kubelet-start] Writing kubelet configuration to file \\\"/var/lib/kubelet/config.yaml\\\"\\n[kubelet-start] Activating the kubelet service\\n[certs] Using certificateDir folder \\\"/etc/kubernetes/pki\\\"\\n[certs] Generating \\\"ca\\\" certificate and key\\n[certs] Generating \\\"apiserver-kubelet-client\\\" certificate and key\\n[certs] Generating \\\"apiserver\\\" certificate and key\\n[certs] apiserver serving cert is signed for DNS names [k8smaster kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.1.25]\\n[certs] Generating \\\"front-proxy-ca\\\" certificate and key\\n[certs] Generating \\\"front-proxy-client\\\" certificate and key\\n[certs] Generating \\\"etcd/ca\\\" certificate and key\\n[certs] Generating \\\"etcd/peer\\\" certificate and key\\n[certs] etcd/peer serving cert is signed for DNS names [k8smaster localhost] and IPs [192.168.1.25 127.0.0.1 ::1]\\n[certs] Generating \\\"etcd/server\\\" certificate and key\\n[certs] etcd/server serving cert is signed for DNS names [k8smaster localhost] and IPs [192.168.1.25 127.0.0.1 ::1]\\n[certs] Generating \\\"etcd/healthcheck-client\\\" certificate and key\\n[certs] Generating \\\"apiserver-etcd-client\\\" certificate and key\\n[certs] Generating \\\"sa\\\" key and public key\\n[kubeconfig] Using kubeconfig folder \\\"/etc/kubernetes\\\"\\n[kubeconfig] Writing \\\"admin.conf\\\" kubeconfig file\\n[kubeconfig] Writing \\\"kubelet.conf\\\" kubeconfig file\\n[kubeconfig] Writing \\\"controller-manager.conf\\\" kubeconfig file\\n[kubeconfig] Writing \\\"scheduler.conf\\\" kubeconfig file\\n[control-plane] Using manifest folder \\\"/etc/kubernetes/manifests\\\"\\n[control-plane] Creating static Pod manifest for \\\"kube-apiserver\\\"\\n[control-plane] Creating static Pod manifest for \\\"kube-controller-manager\\\"\\n[control-plane] Creating static Pod manifest for \\\"kube-scheduler\\\"\\n[etcd] Creating static Pod manifest for local etcd in \\\"/etc/kubernetes/manifests\\\"\\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory \\\"/etc/kubernetes/manifests\\\". This can take up to 4m0s\\n[kubelet-check] Initial timeout of 40s passed.\\n[apiclient] All control plane components are healthy after 47.005054 seconds\\n[uploadconfig] storing the configuration used in ConfigMap \\\"kubeadm-config\\\" in the \\\"kube-system\\\" Namespace\\n[kubelet] Creating a ConfigMap \\\"kubelet-config-1.13\\\" in namespace kube-system with the configuration for the kubelets in the cluster\\n[patchnode] Uploading the CRI Socket information \\\"/var/run/dockershim.sock\\\" to the Node API object \\\"k8smaster\\\" as an annotation\\n[mark-control-plane] Marking the node k8smaster as control-plane by adding the label \\\"node-role.kubernetes.io/master=''\\\"\\n[mark-control-plane] Marking the node k8smaster as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\\n[bootstrap-token] Using token: ltu5mp.69fn9xbc9fhwi56o\\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\\n[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\\n[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\\n[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\\n[bootstraptoken] creating the \\\"cluster-info\\\" ConfigMap in the \\\"kube-public\\\" namespace\\n[addons] Applied essential addon: CoreDNS\\n[addons] Applied essential addon: kube-proxy\\n \\nYour Kubernetes master has initialized successfully!\\n \\nTo start using your cluster, you need to run the following as a regular user:\\n \\n  mkdir -p $HOME/.kube\\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\\n \\nYou should now deploy a pod network to the cluster.\\nRun \\\"kubectl apply -f [podnetwork].yaml\\\" with one of the options listed at:\\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\\n \\nYou can now join any number of machines by running the following on each node\\nas root:\\n \\n  kubeadm join 192.168.1.25:6443 --token ltu5mp.69fn9xbc9fhwi56o --discovery-token-ca-cert-hash sha256:8974e6da7669232565f49bdb03b8632b5c46954dbcac24b76867d24a51ff8fd2\\n\")), mdx(\"h2\", {\n    \"id\": \"configure-user-manager\"\n  }, \"Configure user manager\"), mdx(\"p\", null, \"Log with your cluster user and run :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir -p $HOME/.kube\\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\\n\")), mdx(\"h2\", {\n    \"id\": \"configure-your-cluster-network\"\n  }, \"Configure your cluster network\"), mdx(\"p\", null, \"Kubernetes needs a pod to manage its network. Pods are small computer unit that can be deployed and managed by Kubernetes. In this example, I use a pod named Flannel. Find every network pods reading the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kubernetes.io/docs/concepts/cluster-administration/networking/\"\n  }), \"Kubernetes network documentation\"), \".\"), mdx(\"br\", null), \"Install your Flannel network running :\", mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~$ kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml\\npodsecuritypolicy.extensions/psp.flannel.unprivileged created\\nclusterrole.rbac.authorization.k8s.io/flannel created\\nclusterrolebinding.rbac.authorization.k8s.io/flannel created\\nserviceaccount/flannel created\\nconfigmap/kube-flannel-cfg created\\ndaemonset.extensions/kube-flannel-ds-amd64 created\\ndaemonset.extensions/kube-flannel-ds-arm64 created\\ndaemonset.extensions/kube-flannel-ds-arm created\\ndaemonset.extensions/kube-flannel-ds-ppc64le created\\ndaemonset.extensions/kube-flannel-ds-s390x created\\n\")), mdx(\"p\", null, \"Once your network initialized, check your cluster state:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~$ kubectl get pods --all-namespaces -o wide\\nNAMESPACE     NAME                                READY   STATUS    RESTARTS   AGE     IP             NODE        NOMINATED NODE   READINESS GATES\\nkube-system   coredns-86c58d9df4-lwrvf            1/1     Running   0          16m     10.244.0.3     k8smaster   <none>           <none>\\nkube-system   coredns-86c58d9df4-vzw5q            1/1     Running   0          16m     10.244.0.2     k8smaster   <none>           <none>\\nkube-system   etcd-k8smaster                      1/1     Running   0          16m     192.168.1.25   k8smaster   <none>           <none>\\nkube-system   kube-apiserver-k8smaster            1/1     Running   0          16m     192.168.1.25   k8smaster   <none>           <none>\\nkube-system   kube-controller-manager-k8smaster   1/1     Running   1          16m     192.168.1.25   k8smaster   <none>           <none>\\nkube-system   kube-flannel-ds-amd64-sdhxk         1/1     Running   0          3m33s   192.168.1.25   k8smaster   <none>           <none>\\nkube-system   kube-proxy-b68zq                    1/1     Running   0          16m     192.168.1.25   k8smaster   <none>           <none>\\nkube-system   kube-scheduler-k8smaster            1/1     Running   1          16m     192.168.1.25   k8smaster   <none>           <none>\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~$ kubectl get nodes\\nNAME        STATUS   ROLES    AGE   VERSION\\nk8smaster   Ready    master   18m   v1.13.4\\n\")), mdx(\"p\", null, \"Currently, k8snode1 and k8snode2 are out of the cluster. You only see system pods and the k8smaster node.\"), mdx(\"h2\", {\n    \"id\": \"add-both-nodes-in-the-cluster\"\n  }, \"Add both nodes in the cluster\"), mdx(\"p\", null, \"Note Kubernetes print the command to add a node in a cluster at the end of cluster initialization. Log to k8snode1 and k8snode2 and execute the following command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"kubeadm join 192.168.1.25:6443 --token ltu5mp.69fn9xbc9fhwi56o --discovery-token-ca-cert-hash sha256:8974e6da7669232565f49bdb03b8632b5c46954dbcac24b76867d24a51ff8fd2\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~$ssh root@k8snode1\\nLinux k8snode1 4.9.0-8-amd64 #1 SMP Debian 4.9.144-3.1 (2019-02-19) x86_64\\n \\nThe programs included with the Debian GNU/Linux system are free software;\\nthe exact distribution terms for each program are described in the\\nindividual files in /usr/share/doc/*/copyright.\\n \\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\\npermitted by applicable law.\\nLast login: Sun Mar  3 16:12:52 2019 from 192.168.1.16\\nroot@k8snode1:~# kubeadm join 192.168.1.25:6443 --token ltu5mp.69fn9xbc9fhwi56o --discovery-token-ca-cert-hash sha256:8974e6da7669232565f49bdb03b8632b5c46954dbcac24b76867d24a51ff8fd2\\n[preflight] Running pre-flight checks\\n    [WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.3. Latest validated version: 18.06\\n[discovery] Trying to connect to API Server \\\"192.168.1.25:6443\\\"\\n[discovery] Created cluster-info discovery client, requesting info from \\\"https://192.168.1.25:6443\\\"\\n[discovery] Requesting info from \\\"https://192.168.1.25:6443\\\" again to validate TLS against the pinned public key\\n[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server \\\"192.168.1.25:6443\\\"\\n[discovery] Successfully established connection with API Server \\\"192.168.1.25:6443\\\"\\n[join] Reading configuration from the cluster...\\n[join] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'\\n[kubelet] Downloading configuration for the kubelet from the \\\"kubelet-config-1.13\\\" ConfigMap in the kube-system namespace\\n[kubelet-start] Writing kubelet configuration to file \\\"/var/lib/kubelet/config.yaml\\\"\\n[kubelet-start] Writing kubelet environment file with flags to file \\\"/var/lib/kubelet/kubeadm-flags.env\\\"\\n[kubelet-start] Activating the kubelet service\\n[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...\\n[patchnode] Uploading the CRI Socket information \\\"/var/run/dockershim.sock\\\" to the Node API object \\\"k8snode1\\\" as an annotation\\n \\nThis node has joined the cluster:\\n* Certificate signing request was sent to apiserver and a response was received.\\n* The Kubelet was informed of the new secure connection details.\\n \\nRun 'kubectl get nodes' on the master to see this node join the cluster.\\n\")), mdx(\"p\", null, \"Once you execute the commands on a node, check your cluster nodes state in the master server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~$ kubectl get nodes\\nNAME        STATUS     ROLES    AGE   VERSION\\nk8smaster   Ready      master   22m   v1.13.4\\nk8snode1    NotReady   <none>   47s   v1.13.4\\n\")), mdx(\"p\", null, \"Your node is now in your cluster! Execute the same command on the second node.\"), mdx(\"h2\", {\n    \"id\": \"few-commands-to-manage-your-cluster\"\n  }, \"Few commands to manage your cluster\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kubeadm reset -f\"), \": delete all your cluster configuration on the node. It hard reset your cluster node.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kubectl delete node <node_name>\"), \": delete given node from your cluster, but keep your configuration.\")), mdx(\"h1\", {\n    \"id\": \"install-kubernetes-dashboard\"\n  }, \"Install Kubernetes Dashboard\"), mdx(\"p\", null, \"On your master server, install the Kubernetes dashboard by running the following commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml\\nsecret/kubernetes-dashboard-certs created\\nserviceaccount/kubernetes-dashboard created\\nrole.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created\\nrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created\\ndeployment.apps/kubernetes-dashboard created\\nservice/kubernetes-dashboard created\\n\")), mdx(\"p\", null, \"Initialize the dashboard by creating a folder \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".kubedashboard-config\"), \" on the master and add those two files:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"admin-user.yml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"admin-role.yml\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir ~/.kubedashboard-config\\ncd ~/.kubedashboard-config\\ntouch admin-user.yml\\ntouch admin-role.yml\\n\")), mdx(\"p\", null, \"admin-user.yml:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: admin-user\\n  namespace: kube-system\\n\")), mdx(\"p\", null, \"admin-role.yml:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: rbac.authorization.k8s.io/v1beta1\\nkind: ClusterRoleBinding\\nmetadata:\\n  name: admin-user\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: ClusterRole\\n  name: cluster-admin\\nsubjects:\\n- kind: ServiceAccount\\n  name: admin-user\\n  namespace: kube-system\\n\")), mdx(\"p\", null, \"Change your cluster configuration from the master using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~/.kubedashboard-config$ kubectl apply -f admin-user.yml\\nserviceaccount/admin created\\ncluster@k8smaster:~/.kubedashboard-config$ kubectl apply -f admin-role.yml\\nclusterrolebinding.rbac.authorization.k8s.io/admin created\\n\")), mdx(\"p\", null, \"To connect to your dashboard, retrieve your login token.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~/.kubedashboard-config$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')\\nName:         admin-user-token-8ncll\\nNamespace:    kube-system\\nLabels:       <none>\\nAnnotations:  kubernetes.io/service-account.name: admin-user\\n              kubernetes.io/service-account.uid: 634db938-3dd0-11e9-83e9-0800273a23b5\\n \\nType:  kubernetes.io/service-account-token\\n \\nData\\n====\\nca.crt:     1025 bytes\\nnamespace:  11 bytes\\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLThuY2xsIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI2MzRkYjkzOC0zZGQwLTExZTktODNlOS0wODAwMjczYTIzYjUiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.R5T_fighTe1vaZF_--gGlWEfd4zg8iv-E4DydXDKK02zI4jMD7DL6YMWyPVGZPkgeGznuM20DGe1Af_oYOpKaBAipsjTEChNLVrDiOAZvYUEMCjsmfg2HKz5iVT5e94zVG07MrSQqv7N4W7CL82SJElc8qMaJlmyOAavC1RHdvoBJTyMi4w3mp5IFPdYlXGXlw20qV6FfchgeXtpIGrB1RWc0kkMZgBm5cjTtDx4LEoqo3JIkCRqaeHZeWY2pd7XbXWUiyOAWj54BneMyghYftptFTx4nRUteS_RAAHU4dDum8jcOEjrDL-lVwJXfVgNTCDK5zz-IThnj1xmF9t9JA\\n\")), mdx(\"p\", null, \"Copy the token and run the dashboard.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~/.kubedashboard-config$ kubectl proxy\\nStarting to serve on 127.0.0.1:8001\\n\")), mdx(\"p\", null, \"Once the dashboard starts, create an ssh tunnel. AS the dashboard is unreachable outside of your cluster, create an ssh tunnel.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"ssh -L 8001:localhost:8001 cluster@k8smaster\\n\")), mdx(\"p\", null, \"You can now log in to your dashboard on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://127.0.0.1:8001\"\n  }), \"localhost:8001\"), \".\"), mdx(\"h1\", {\n    \"id\": \"deploy-your-cluster\"\n  }, \"Deploy your cluster\"), mdx(\"h2\", {\n    \"id\": \"image-creation\"\n  }, \"Image creation\"), mdx(\"p\", null, \"Because it is a Kubernetes experimentation, I store the image on the k8smaster. Create a folder image, add an app.js and a Dockerfile.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir ~/image\\ncd ~/image\\ntouch app.js\\ntouch Dockerfile\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var http = require(\\\"http\\\");\\n \\nvar handleRequest = function(request, response) {\\n  console.log(\\\"Received request for URL: \\\" + request.url);\\n  response.writeHead(200);\\n  response.end(\\\"Hello World!\\\");\\n};\\nvar www = http.createServer(handleRequest);\\nwww.listen(8080);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Dockerfile\"\n  }), \"FROM node\\nEXPOSE 8080\\nCOPY app.js .\\nCMD node app.js\\n\")), mdx(\"p\", null, \"Launch image creation.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~/image$ docker build -t helloworld-k8s .\\nSending build context to Docker daemon  3.072kB\\nStep 1/4 : FROM node\\nlatest: Pulling from library/node\\n741437d97401: Pull complete\\n34d8874714d7: Pull complete\\n0a108aa26679: Pull complete\\n7f0334c36886: Pull complete\\n49ea0d2b5c48: Pull complete\\n90b64fb1507f: Pull complete\\n6bdcc654ac0b: Pull complete\\n453eaa93fbdc: Pull complete\\nDigest: sha256:886746fb8d0a81ba0118c4cf0eaf9875d6a52d5e915fe4f1bc8b50419a5d2ba7\\nStatus: Downloaded newer image for node:latest\\n ---> dd913630b38a\\nStep 2/4 : EXPOSE 8080\\n ---> Running in 5c5109fb5312\\nRemoving intermediate container 5c5109fb5312\\n ---> fed36cdcc7ba\\nStep 3/4 : COPY app.js .\\n ---> fe6bbf3e5ffc\\nStep 4/4 : CMD node app.js\\n ---> Running in 57a193ac5f90\\nRemoving intermediate container 57a193ac5f90\\n ---> 61e6044df293\\nSuccessfully built 61e6044df293\\nSuccessfully tagged helloworld-k8s:latest\\n\")), mdx(\"p\", null, \"Once process ends, check your image state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~/image$ docker images\\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\\nhelloworld-k8s           latest              61e6044df293        32 seconds ago      916MB\\nnode                     latest              dd913630b38a        38 hours ago        916MB\\nk8s.gcr.io/kube-proxy    v1.13.4             fadcc5d2b066        3 days ago          80.3MB\\nquay.io/coreos/flannel   v0.11.0-amd64       ff281650a721        4 weeks ago         52.6MB\\nk8s.gcr.io/pause         3.1                 da86e6ba6ca1        14 months ago       742kB\\n\")), mdx(\"h2\", {\n    \"id\": \"configure-your-deployment\"\n  }, \"Configure your deployment\"), mdx(\"p\", null, \"Create a folder k8s-deployment and a deployment.yml file. This file describes your cluster and contains all your cluster configuration.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir ~/k8s-deployment\\ncd ~/k8s-deployment\\ntouch deployment.yml\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: helloworld-k8s-deployment\\nspec:\\n  selector:\\n    matchLabels:\\n      app: helloworld-k8s-label\\n  replicas: 2\\n  template:\\n    spec:\\n      containers:\\n        - name: node\\n          imagePullPolicy: Never\\n          image: helloworld-k8s:latest\\n          ports:\\n            - containerPort: 8080\\n    metadata:\\n      labels:\\n        app: helloworld-k8s-label\\n\")), mdx(\"p\", null, \"Launch deployment by executing the following command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cluster@k8smaster:~/k8s-deployment$ kubectl create -f deployment.yml\\ndeployment.apps/helloworld-k8s-deployment created\\n\")), mdx(\"p\", null, \"That it, your Kubernetes cluster is running !\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Create a simple Kubernetes cluster","description":"Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation. It has a large, rapidly growing ecosystem. Kubernetes services, support, and tools are widely available. In this tutorial, I create and deploy a simple Kubernetes cluster containing a Hello World NodeJS application.","date":"12 hours ago"},"headings":[{"value":"Requirements"},{"value":"Docker installation"},{"value":"Kubernetes installation"},{"value":"Configure servers hostname"},{"value":"Configure Kubernetes Cluster"},{"value":"Cluster initialization"},{"value":"Configure user manager"},{"value":"Configure your cluster network"},{"value":"Add both nodes in the cluster"},{"value":"Few commands to manage your cluster"},{"value":"Install Kubernetes Dashboard"},{"value":"Deploy your cluster"},{"value":"Image creation"},{"value":"Configure your deployment"}],"tableOfContents":{"items":[{"url":"#requirements","title":"Requirements"},{"url":"#docker-installation","title":"Docker installation"},{"url":"#kubernetes-installation","title":"Kubernetes installation"},{"url":"#configure-servers-hostname","title":"Configure servers hostname"},{"url":"#configure-kubernetes-cluster","title":"Configure Kubernetes Cluster","items":[{"url":"#cluster-initialization","title":"Cluster initialization"},{"url":"#configure-user-manager","title":"Configure user manager"},{"url":"#configure-your-cluster-network","title":"Configure your cluster network"},{"url":"#add-both-nodes-in-the-cluster","title":"Add both nodes in the cluster"},{"url":"#few-commands-to-manage-your-cluster","title":"Few commands to manage your cluster"}]},{"url":"#install-kubernetes-dashboard","title":"Install Kubernetes Dashboard"},{"url":"#deploy-your-cluster","title":"Deploy your cluster","items":[{"url":"#image-creation","title":"Image creation"},{"url":"#configure-your-deployment","title":"Configure your deployment"}]}]}}},"pageContext":{"slug":"/create-a-simple-kubernetes-cluster"}}}